'''TASK LEVEL: BEGINNGER


QUESTION 1: VARIABLES
TASK 1: Create a variable named pi and store the value 22/7 in it.
Now check the data type of this variable.'''
pi=22/7
print(type(pi))
'''TASK 2: Create a variable called for and assign it a value 4. See what
happens and find out the reason behind the behavior that you
see.'''
'''for=4
print(for)
output:  File "/home/runner/python-task-q/main.py", line 9
    for=4
       ^
SyntaxError: invalid syntax
reason:  for is a reserved keyword in Python'''
'''TASK 3: Store the principal amount, rate of interest, and time in different variables and then calculate the Simple Interest for 3 years. Formula: Simple Interest = P x R x T / 100
'''
P = 10000  # Principal amount
R = 5      # Rate of interest
T = 3      # Time in years
simple_interest = (P * R * T) / 100
print(f"Simple Interest for {T} years: {simple_interest}")




'''QUESTION 2: NUMBERS
TASK 1: Write a function that takes two arguments, 145 and 'o'
, and
uses the `format` function to return a formatted string. Print the
result. Try to identify the representation used.'''
def format_string(number, char):
  formatted_str = "The number is {} and the character is '{}'".format(number, char)
  return formatted_str
result = format_string(145, 'o')
print(result)
'''TASK 2: In a village, there is a circular pond with a radius of 84 meters.
Calculate the area of the pond using the formula: Circle Area = π
r^2. (Use the value 3.14 for π) Bonus Question: If there is exactly
1.4 liters of water in a square meter, what is the total amount of
water in the pond? Print the answer without any decimal point in
it. Hint: Circle Area = π r^2 Water in the pond = Pond Area
Water per Square Meter'''
def pond_water(radius, water_per_sq_meter):
  pi = 3.14
  area = pi * (radius ** 2)
  total_water = int(area * water_per_sq_meter)
  return area, total_water
radius = 84  # meters
water_per_sq_meter = 1.4  # liters
area_of_pond, total_water_in_pond = pond_water(radius, water_per_sq_meter)
print(f"Area of the pond: {area_of_pond} sq meters")
print(f"Total water in the pond: {total_water_in_pond} liters")
'''TASK 3: If you cross a 490meterlong street in 7 minutes, calculate your
speed in meters per second. Print the answer without any decimal
point in it. Hint: Speed = Distance / Time'''
def calculate_speed(distance, time):
  time_in_seconds = time * 60
  speed = distance / time_in_seconds
  return int(speed)

distance = 490  # meters
time_in_minutes = 7  # minutes

speed = calculate_speed(distance, time_in_minutes)
print(f"Speed: {speed} meters per second")




'''QUESTON 4: IF CONDITION
TASK 1:1. Write a program to determine the BMI Category based on user input.
Ask the user to:
Enter height in meters
Enter weight in kilograms
Calculate BMI using the formula: BMI = weight / (height)2
Use the following categories:
If BMI is 30 or greater, print "Obesity"
If BMI is between 25 and 29, print "Overweight"
If BMI is between 18.5 and 25, print "Normal"
If BMI is less than 18.5, print "Underweight"
Example:
Enter height in meters: 1.75
Enter weight in kilograms: 70
Output: "Normal"'''
# BMI calculation and category determination
def calculate_bmi():
    # Asking user for input
    height = float(input("Enter height in meters: "))
    weight = float(input("Enter weight in kilograms: "))
    # Calculating BMI
    bmi = weight / (height ** 2)
    # Determining BMI category
    if bmi >= 30:
        print("Obesity")
    elif 25 <= bmi < 30:
        print("Overweight")
    elif 18.5 <= bmi < 25:
        print("Normal")
    else:
        print("Underweight")
# Call the function
calculate_bmi()

'''TASK 2: Write a program to determine which country a city belongs to. Given
list of cities per country:
Australia = ["Sydney","Melbourne","Brisbane","Perth"]
UAE = ["Dubai","Abu Dhabi","Sharjah","Ajman"]
India = ["Mumbai","Bangalore","Chennai","Delhi"]
Ask the user to enter a city name and print the corresponding country.
Example:
Enter a city name: "Abu Dhabi"
Output: "Abu Dhabi is in UAE"'''
# Function to determine country from city
def find_country():
    australia = ["Sydney", "Melbourne", "Brisbane", "Perth"]
    uae = ["Dubai", "Abu Dhabi", "Sharjah", "Ajman"]
    india = ["Mumbai", "Bangalore", "Chennai", "Delhi"]
    # Asking user for city input
    city = input("Enter a city name: ").strip()
    # Checking which country the city belongs to
    if city in australia:
        print(f"{city} is in Australia")
    elif city in uae:
        print(f"{city} is in UAE")
    elif city in india:
        print(f"{city} is in India")
    else:
        print(f"{city} is not in the list")
# Call the function
find_country()

'''TASK 3: Write a program to check if two cities belong to the same country.
Ask the user to enter two cities and print whether they belong to the
same country or not.

Example:
Enter the first city: "Mumbai"
Enter the second city: "Chennai"
Output: "Both cities are in India"

Example:
Enter the first city: "Sydney"
Enter the second city: "Dubai"
Output: "They don't belong to the same country"'''
# Function to check if two cities belong to the same country
def same_country():
    australia = ["Sydney", "Melbourne", "Brisbane", "Perth"]
    uae = ["Dubai", "Abu Dhabi", "Sharjah", "Ajman"]
    india = ["Mumbai", "Bangalore", "Chennai", "Delhi"]
    # Asking user for two city inputs
    city1 = input("Enter the first city: ").strip()
    city2 = input("Enter the second city: ").strip()
    # Checking if both cities belong to the same country
    if city1 in australia and city2 in australia:
        print(f"Both cities are in Australia")
    elif city1 in uae and city2 in uae:
        print(f"Both cities are in UAE")
    elif city1 in india and city2 in india:
        print(f"Both cities are in India")
    else:
        print("They don't belong to the same country")
# Call the function
same_country()





'''QUESTION 5: FOR LOOP
TASK 1: Using a for loop, simulate rolling a sixsided die multiple times (at least 20
times).
Count and print the following statistics:
How many times you rolled a 6
How many times you rolled a 1
How many times you rolled two 6s in a row'''
import random
# Initialize counters
count_6 = 0
count_1 = 0
count_two_6s_in_a_row = 0
previous_roll = 0  # Keep track of the previous roll
# Simulate rolling the die 20 times
for i in range(20):
    roll = random.randint(1, 6)
    # Check if it's a 6
    if roll == 6:
        count_6 += 1
    # Check if it's a 1
    if roll == 1:
        count_1 += 1
    # Check if there are two 6s in a row
    if roll == 6 and previous_roll == 6:
        count_two_6s_in_a_row += 1
    # Update the previous roll
    previous_roll = roll
# Print the results
print(f"Rolled a 6: {count_6} times")
print(f"Rolled a 1: {count_1} times")
print(f"Two 6s in a row: {count_two_6s_in_a_row} times")

'''TASK 2: Imagine you are doing a workout routine, and you have to complete 100
jumping jacks.
Write a program that:
Asks you to perform 10 jumping jacks at a time.
After each set, it asks, "Are you tired?"'''
# Workout routine with 100 jumping jacks
def workout():
    total_jumping_jacks = 100
    completed_jumping_jacks = 0
    while completed_jumping_jacks < total_jumping_jacks:
        # Perform 10 jumping jacks
        completed_jumping_jacks += 10
        print(f"You've completed {completed_jumping_jacks} jumping jacks")
        # Ask if the user is tired
        tired = input("Are you tired? (yes/y or no/n): ").strip().lower()
        if tired == 'yes' or tired == 'y':
            # Ask if the user wants to skip the remaining sets
            skip = input("Do you want to skip the remaining sets? (yes/y or no/n): ").strip().lower()
            if skip == 'yes' or skip == 'y':
                print(f"You completed a total of {completed_jumping_jacks} jumping jacks.")
                break
        else:
            # Calculate how many jumping jacks are remaining
            remaining_jumping_jacks = total_jumping_jacks - completed_jumping_jacks
            print(f"{remaining_jumping_jacks} jumping jacks remaining.")
    if completed_jumping_jacks == total_jumping_jacks:
        print("Congratulations! You completed the workout.")
# Call the workout function
workout()




'''QUESTION 6: DICTIONARY
TASK 1: 1. Create a list of your friends' names. The list should have at least 5 names.
Create a list of tuples. Each tuple should contain a friend's name and the length
of the name.
For example, if someone’s name is Aditya, the tuple would be: ('Aditya', 6)'''
# Creating a list of friends' names
friends = ["John", "Emily", "Michael", "Sophia", "David"]
# Creating a list of tuples with each friend's name and the length of their name
friends_with_name_length = [(friend, len(friend)) for friend in friends]
# Output the list of tuples
print(friends_with_name_length)

'''TASK 2:2.You and your partner are planning a trip, and you want to track expenses.
Create two dictionaries, one for your expenses and one for your partner's
expenses. Each dictionary should contain at least 5 expense categories and their
corresponding amounts.'''
# Your expenses
your_expenses = {
    "Hotel": 1200,
    "Food": 800,
    "Transportation": 500,
    "Attractions": 300,
    "Miscellaneous": 200}
# Your partner's expenses
partner_expenses = {
    "Hotel": 1000,
    "Food": 900,
    "Transportation": 600,
    "Attractions": 400,
    "Miscellaneous": 150}
# Calculate total expenses for each person
your_total_expenses = sum(your_expenses.values())
partner_total_expenses = sum(partner_expenses.values())
# Print total expenses
print(f"Your total expenses: {your_total_expenses}")
print(f"Your partner's total expenses: {partner_total_expenses}")
# Determine who spent more
if your_total_expenses > partner_total_expenses:
    print("You spent more money overall.")
elif your_total_expenses < partner_total_expenses:
    print("Your partner spent more money overall.")
else:
    print("You and your partner spent the same amount.")
# Find out the expense category with significant differences
significant_diff = {}
for category in your_expenses:
    difference = abs(your_expenses[category] - partner_expenses[category])
    if difference > 100:  # You can set your own threshold for "significant"
        significant_diff[category] = difference
# Print categories with significant differences
if significant_diff:
    for category, difference in significant_diff.items():
        print(f"Significant difference in {category}: {difference}")
else:
    print("No significant differences in spending.")
      
